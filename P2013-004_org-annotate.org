#+TITLE: org-annotate - handling side notes in org-mode
#+LANGUAGE:  en
#+AUTHOR: Jean-MichelC
#+EMAIL:
#+DESCRIPTION: the file containing the code and the comments
#+KEYWORDS:  org-mode Emacs annotate notes side-notes
#+SEQ_TODO: FIXME FIXME-BUG FIXME-LIMITATION FIXED
#+STARTUP: nofninline
#+OPTIONS: toc:nil


#+BEGIN_ABSTRACT
org-annotate is a project to handle, in an org file, notes called =annotations=. The purpose and the way it works is different, complementary to the =org-footnote= facility. =Annotations= are supposed to be created in a read-only document, and then to stay constantly under your eyes, exactly as you would have a book with hand-written side notes. You take notes, you cannot change the text of the book ; each time you read the page that you annotated, the notes are under your eyes.
=Currently under development, per [2013-12-08 dim.] in alpha status.=
#+END_ABSTRACT
#+TOC: headlines 2

* FIXME on git-hub, the abstract does not appear !
=This is a manual copy-paste of the abstract above - do not edit it=
org-annotate is a project to handle, in an org file, notes called =annotations=. The purpose and the way it works is different, complementary to the =org-footnote= facility. =Annotations= are supposed to be created in a read-only document, and then to stay constantly under your eyes, exactly as you would have a book with hand-written side notes. You take notes, you cannot change the text of the book ; each time you read the page that you annotated, the notes are under your eyes.
=Currently under development, per [2013-12-08 dim.] in alpha status.=


* FIXME-BUG le git ne push pas ... !!! donc absence de sauvegarde !
* FIXME-BUG Wuala crashe par manque de mémoire ... !! donc absence de sauvergarde
* quel nom pour le projet ? ANNOTATE ? ANT ? REF-TEXT ?
- ANNOTATE : ANnotate is NOT A Text E... ?
- ANNOTATE : ANnotate is Not Only for Text Annotations T E
- ANT : ANT is Not AN ANoTation ....



* introduction to org-annotate
:PROPERTIES:
:INITIAL_DATE: [2013-12-08 dim.]
:END:

** vocabulary
- annotation :: A note that you take manually to comment your text. Each note is time-stamped and signed. An annotation is to be seen as a side note or margin note that you may take in a book.

- footnote :: Remains here the notes that you create with the invaluable native org footnotes. See [[info:org#Footnotes][(org) Footnotes]] to know more. (info "(org) Footnotes")

- reference text :: The text that you want to annotate. org-annotate provides facilities to keep it unchanged, while offering functions to annotate it and read both the text and the corresponding notes.



** purpose
The purpose of org-annotate is to work on a text that you do not want to change, because it serves as reference text. There is a strong emphasis on considering your text as a reference that is protected against any change. A consequence of that is that adding footnotes is an option that is not considered. As if the text was printed on paper, you wont change the text in any way, but want to annotate it. You then will be able to keep the notes constantly under your eyes as you travel through the corresponding text.

But as you are in org-mode, you have tremendous possibilities, and org-annotate aims at taking advantages of them. Annotations will offer you everything that headers offer, especially properties and tags. For example, every annotation is time stamped and signed, in a property drawer.

Properties allow every kind of filtering of the notes. For example you'll be able to read your text with, under your eyes, notes filtered on some selection criteria : only the notes signed by "John Doe", or notes taken between date_1 and date_2, or any kind of filtering criteria you derive from properties you may have defined when taking notes.

** requirements
You have to know emacs org-mode. If not, learn it first. http://orgmode.org/ is the right place to start.


** how it works
For simplicity reasons, org-annotate will as far as possible mimicate the footnotes capabilities natively offered by org-mode.

For example, to create a footnote you usually use =org-footnote-new=[fn:1]. For annotations, you will invoke =org-annotate-new=. It won't prompt for a label, as the reference of the note is automatically handled for you, as will the time stamp be.

The notes are kept under your eyes in a separate, synchronized window.

The notes are stored in a separate outline heading in the file of the reference text. =Org-annotate= handles the necessary actions to keep the reference text read-only, while you are able to write annotations at a separate place in the same file.

[fn:1]
org-footnote-new

Insert a new footnote. This command prompts for a label. If this is a label referencing an existing label, only insert the label. If the footnote label is empty or new, let the user edit the definition of the footnote.



* FIXME is this usefull ? /// initial steps

** FIXME-LIMITATION définir le `require' nécessaire à faire fonctionner tout cela ...

** FIXME per-file initial steps

*** ANT works on org files
- open your org file

*** Make headers visible for the ANT functions
Set the following properties on every header you want to be able to apply ANT functions:
- set the property ANT-REF to either REFERENCE or ANNOTATION or anything else
  - the value REF declares the whole header as a reference portion of text
  - ant acts only on those headers that have the REFERENCE status
- set the property ANT-READ-ONLY to either t or nil

*** Get your org file treated as a reference text
By putting the following line at the top of your file :
#+BEGIN_EXAMPLE
# -*- mode: Org; eval: (org-map-entries 'ant-apply-read-subtree-status "LEVEL=1" nil) -*- #
#+END_EXAMPLE
This code is for initializing the file everytime you'll open it, getting the sections declared as read-only effectively read-only

*** FIXME-LIMITATION ne faut-il pas créer 2 properties ?
- une ANT-READ-ONLY qui donne le statut read-write à appliquer
- une ANT-TYPE qui déclare la section en REF ou en ANNOTATION ou autre

* How to use it

** FIXME trial with ditaa
#+name: ditaa-ant-howto
#+BEGIN_SRC ditaa :file ditaa-ant-howto.png :cmdline -r

   +-------------------+
   |                   |
   |  open your +------+-----------------+
   |  org file  |      |                 |
   |            | A    |                 |
   +------------+------+                 |
                | B                      |
   +------------+------+                 |
   |            |      |                 |
   |            | C    |                 |
   |            +------+-----------------+
   |              D    |
   +-------------------+
                                         +------------+
                                         |            |
                                         |            |
                                         |            |
                                         |            |
                                         |            |
                                         |            |
                                         |            |
                                         +------------+
#+END_SRC

#+RESULTS: ditaa-ant-howto
[[file:ditaa-ant-howto.png]]



** FIXME trial 1 with plantuml ///

#+name: plantuml-ant-howto
#+BEGIN_SRC plantuml :file plantuml-ant-howto.png

@startuml
title ANT how-to\nphase 1\ninitialise

(*) --> "open your org file\nANT works as a minor mode for org mode"
-->"initialise all headers with the ANT-REF property\nset ANT-REF either to value REFERENCE or value ANNOTATION"
--> (*)

@enduml






#+END_SRC

#+RESULTS: plantuml-ant-howto
[[file:plantuml-ant-howto.png]]

** FIXME trial 2 with plantuml ///

#+name: plantuml-ant-howto
#+BEGIN_SRC plantuml :file plantuml-ant-howto.png

@startuml
title ANT how-to\nphase 1\ninitialise



@enduml






#+END_SRC







* the code

** initializing a ref file
- automate the steps described here [[*FIXME%20per-file%20initial%20steps][per-file initial steps]]
  - working on the current buffer
  - checking that this an org-file
  - inserting the header to [[*Get%20your%20org%20file%20treated%20as%20a%20reference%20text][get your org file treated as a reference text]]
*** the code
#+name: initialize-a-ref-file







** making the reference text read-only
- create a special property `:REF-STATUS:' that take the following values:
  - READ-ONLY (default)
  - READ-WRITE
- create a function that applies the read-only/read-write status of a whole header
- when opening the org file, apply that function on every subtree, so that subtrees that serves as reference are read-only
#+BEGIN_SRC elisp
  (defun ant-put-text-property-subtree (property value)
    "Set one property of the text for the current subtree.

  Applies `put-text-property' to the current subtree"
    (save-excursion
      (org-mark-subtree-1)
      (let ((start (point))
            (end (progn (exchange-point-and-mark) (point)))
            (inhibit-read-only t))
        (put-text-property start end property value))))

  (defun org-mark-subtree-1 ()
    "shift the `org-mark-subtree' selection by one position backward"
    (interactive)                           ; only for debug
    (org-mark-subtree)
    (backward-char)
    (exchange-point-and-mark)
    (backward-char)
    (exchange-point-and-mark))

  (defun ant-make-subtree-read-only ()
    "Make a subtree read-only

  use `ant-make-subtree-read-write' for the counter-effect"
    (interactive)
    (ant-put-text-property-subtree 'read-only t))


  (defun ant-make-subtree-read-write ()
    "Make a subtree read-only

  use `ant-make-subtree-read-write' for the counter-effect"
    (interactive)
    (ant-put-text-property-subtree 'read-only nil))

  (defun ant-apply-read-subtree-status ()
    "In an org-mode file, applies the read-only or read-write status of the current subtree

  based on the :ANT-READ-ONLY: property of the header.
  Acceptable values are t and nil"
    (interactive)
    (if (org-entry-get nil "ANT-READ-ONLY")
        (ant-make-subtree-read-only)
      (ant-make-subtree-read-write)))

  (defun ant-entry-force-put-and-apply (value)

    "Set :ANT-READ-ONLY: property to value for current entry, even if the entry is read-only

  Then applies the new status"
    (interactive "sANT-READ-ONLY value:")

    (ant-make-subtree-read-write)
    (org-entry-put nil "ANT-READ-ONLY" value)
    (ant-apply-read-subtree-status))


#+END_SRC

#+RESULTS:
: ant-apply-read-subtree-status

** creating the annotation-section, read-writable

** creating annotations

** reading the reference text while keeping the annotations under your eyes
